
buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }

}

plugins {
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'java-library'
group 'net.minecraftforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "forge"
        url = "https://files.minecraftforge.net/maven"
    }
}
configurations {
    shade // <- Create a 'shade' configuration
    implementation.extendsFrom(shade) // <- Add the shade configuration to implementation
}

jacoco {
    toolVersion = "0.8.2"
}


apply plugin: 'net.minecraftforge.gradle'
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

test {
    useJUnitPlatform()
}

ext.forge_version = "46.0.14"

ext.sharedManifest = manifest {
    attributes(['Class-Path': 'forge.jar',
     'Main-Class': 'net.minecraftforge.server.ServerMain',
     'ServerLaunchArgs': "--gameDir . --launchTarget fmlserver --fml.forgeVersion ${forge_version} --fml.mcpVersion 20210706.113038 --fml.mcVersion 1.17.1 --fml.forgeGroup net.minecraftforge"
    ],
    )
    attributes(
            [
             "Automatic-Module-Name"   : "serverpacklocator",
             "Specification-Title"     : "serverpacklocator",
             "Specification-Vendor"    : "cpw",
             "Specification-Version"   : "1", // Currently version 3 of the forgespi specification
             "Implementation-Title"    : project.name,
             "Implementation-Version"  : "${version}+${System.getenv("BUILD_NUMBER") ?: 0}+${grgit.head().abbreviatedId}",
             "Implementation-Vendor"   : "cpw",
             "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
             "Git-Commit"              : grgit.head().abbreviatedId,
             "Git-Branch"              : grgit.branch.current().getName()],
            "cpw/mods/forge/serverpacklocator/")
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

minecraft {
    mappings channel: 'official', version: '1.20'
}

dependencies {
    minecraft "net.minecraftforge:forge:1.20-46.0.14"
    implementation("cpw.mods:modlauncher:9.0.7")
    implementation("com.google.code.gson:gson:2.8.0")
    implementation("org.apache.logging.log4j:log4j-api:2.17.0")

    shade fg.deobf('io.netty:netty-codec-http:4.1.77.Final')

//    implementation("io.netty:netty-all:4.1.77.Final")
    implementation("com.electronwill.night-config:core:3.6.0")
    implementation("com.electronwill.night-config:toml:3.6.0")
    implementation("org.apache.maven:maven-artifact:3.6.3")
    testImplementation("org.junit.jupiter:junit-jupiter:5.4.2")
}

task allzips dependsOn('zip', 'serverzip')

task zip(type: Zip, dependsOn: jar) {
    archiveClassifier = "bundle"
    from (jar.outputs) { into ("libraries/cpw/mods/forge/serverpacklocator/${project.version}/") }
    from (file("1.14.4-serverpacklocator.json")) {
        filter { line -> line
                .replace('@version@', "${project.version}")
                .replace('@forgeversion@', "${forge_version}")
        }
        into ("versions/1.14.4-serverpacklocator/")
    }
}

task serverzip(type: Zip, dependsOn: jar) {
    archiveClassifier = "serverbundle"
    from (jar.outputs) {
        into ("/")
    }
    from (files("signcertificate.sh", "runserver.sh")) {
        filter { line -> line
                .replace('@version@', "${project.version}")
                .replace('@forgeversion@', "${forge_version}")
        }
        into("/")
    }
}
// Create shadowJar task
shadowJar {
    configurations = [project.configurations.shade] // <- Tell shadowJar to shade dependencies from 'shade'

//    // Skip unnecessary assets and duplicated java files GeckoLib comes with
//    exclude 'software/bernie/example/**'
//    exclude 'assets/geckolib3/**'
//    exclude '**/*.java'
//    relocate 'software.bernie.shadowed', 'software.bernie.modid.shadowed' // <- Move the shadowed geckolib shadowed packages. This prevents classpath conflicts in runtime
//    relocate 'software.bernie.geckolib', 'software.bernie.modid.geckolib' // <- Move the shadowed geckolib package. This prevents classpath conflicts in runtime

    classifier ''

    finalizedBy 'reobfShadowJar' // <- Finish shading with reobfuscation
}


artifacts {
    archives zip
    archives jar
    archives sourcesJar
    archives tasks.shadowJar
}
reobf { // <- Add the output of shadowJar to reobfuscation, so shadowed content is reobfuscated
    shadowJar {}
}
compileJava {
    options.compilerArgs << "-XDignore.symbol.file"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact zip
            artifact serverzip
            pom {
                name = 'Server Pack Mod Locator'
                description = 'Server Pack Mod Locator'
                url = 'https://github.com/cpw/serverpacklocator'
                scm {
                    url = 'https://github.com/cpw/serverpacklocator'
                    connection = 'scm:git:git://github.com/cpw/serverpacklocator.git'
                    developerConnection = 'scm:git:git@github.com:cpw/serverpacklocator.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/cpw/serverpacklocator/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }

    if (System.getenv().containsKey("LDTTeamJfrogUsername") && System.getenv().containsKey("LDTTeamJfrogPassword")) {
        repositories {
            maven {
                name 'LDTTeamJfrog'
                credentials {
                    username System.getenv().get("LDTTeamJfrogUsername")
                    password System.getenv().get("LDTTeamJfrogPassword")
                }
                url 'https://ldtteam.jfrog.io/ldtteam/mods-maven'
            }
        }
    }
}